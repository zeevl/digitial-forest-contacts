// Generated by CoffeeScript 1.6.3
(function() {
  var cids, contacts, csv, getContact, getContactList, getWmPage, login, pendingContacts, pwd, request, username, writeCsv;

  csv = require('csv');

  request = require('request');

  username = process.argv[1];

  pwd = process.argv[2];

  username = 'steve';

  pwd = 'Lakers#1';

  contacts = [];

  request = request.defaults({
    jar: true,
    followAllRedirects: true,
    headers: {
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1700.77 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Encoding': 'gzip,deflate,sdch'
    }
  });

  console.log('Getting login page..');

  request('http://1891092.svc.e1m.net/email/scripts/loginuser.pl', function(error, response, body) {
    var m;
    m = /loginuser\.pl\?EV1=(\d+)/.exec(body);
    if (!m) {
      console.log("ERROR! Couldn't find EV1 param!");
      process.exit;
    }
    return login(m[1]);
  });

  login = function(ev1) {
    console.log("logging in (ev1: " + ev1 + ")");
    return request({
      url: "http://1891092.svc.e1m.net/email/scripts/loginuser.pl?EV1=" + ev1,
      method: 'POST',
      form: {
        loginName: username,
        user_pwd: pwd,
        login: 'Login'
      }
    }, function(error, response, body) {
      if (response.statusCode === !200) {
        console.log("ERROR! " + response.statusCode);
        process.exit;
      }
      return getWmPage();
    });
  };

  getWmPage = function() {
    console.log('getting wm page...');
    return request('http://1891092.svc.e1m.net/eonapps/ft/wm/page/wm', function(error, response, body) {
      var m;
      m = /"owner":(\d+)/g.exec(body);
      if (!m) {
        console.log("ERROR!  Couldn't find owner");
        console.log(body);
        process.exit;
      }
      return getContactList(parseInt(m[1]), 0);
    });
  };

  cids = [];

  getContactList = function(owner, startIndex) {
    var params;
    console.log("getting contact list " + startIndex + " - " + (startIndex + 100) + "...");
    params = [
      {
        method: "p_none_Cards_retrieveCards",
        params: [
          {
            shelf: {
              owner: owner,
              eonType: "PersonalShelfHandle"
            },
            path: {
              path: "/Personal",
              eonType: "Path"
            },
            eonType: "AddressBookHandle"
          }, startIndex, startIndex + 100, [
            {
              attribute: "lastName",
              ascending: true,
              eonType: "SortCriteria"
            }
          ], null, "America/Los_Angeles"
        ],
        id: 0
      }
    ];
    return request({
      url: "http://1891092.svc.e1m.net/eonapps/ft/wm/raw?rand=" + (Math.random()),
      method: 'POST',
      headers: {
        Accept: '*/*',
        'Content-Type': 'text/xml;charset=UTF-8'
      },
      body: JSON.stringify(params)
    }, function(error, response, body) {
      var c, id, newStart, results, _i, _j, _len, _len1, _ref, _results;
      results = JSON.parse(body);
      _ref = results[0].result.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        cids.push(c.docID);
      }
      if (cids.length === results[0].result.length) {
        _results = [];
        for (_j = 0, _len1 = cids.length; _j < _len1; _j++) {
          id = cids[_j];
          _results.push(getContact(owner, id));
        }
        return _results;
      } else {
        newStart = Math.min(startIndex + 100, results[0].result.length);
        return getContactList(owner, newStart);
      }
    });
  };

  pendingContacts = 0;

  getContact = function(owner, id) {
    var params;
    params = [
      {
        method: "p_none_Cards_retrieveCard",
        params: [
          {
            shelf: {
              owner: owner,
              eonType: "PersonalShelfHandle"
            },
            path: {
              path: "/Personal",
              eonType: "Path"
            },
            eonType: "AddressBookHandle"
          }, id
        ],
        id: 0
      }
    ];
    pendingContacts++;
    return request({
      url: "http://1891092.svc.e1m.net/eonapps/ft/wm/raw?rand=" + (Math.random()),
      method: 'POST',
      headers: {
        Accept: '*/*',
        'Content-Type': 'text/xml;charset=UTF-8'
      },
      body: JSON.stringify(params)
    }, function(error, response, body) {
      var contact, email, ex, phone, result, results, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
      results = JSON.parse(body);
      result = results[0].result;
      try {
        contact = {
          'First Name': result.name.givenName,
          'Middle Name': (_ref = result.name.additionalNames[0]) != null ? _ref.middle : void 0,
          'Last Name': result.name.familyName,
          'Title': (_ref1 = result.titles[0]) != null ? _ref1.value : void 0,
          'Mobile Phone': '',
          'Business Fax': '',
          'Business Phone': '',
          'Home Phone': '',
          'Other Phone': '',
          'Email Address': '',
          'Email Address 2': '',
          'Email Address 3': ''
        };
        _ref2 = result.telephoneNumbers;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          phone = _ref2[_i];
          switch (phone.types[0]) {
            case 'MOBILE':
              contact['Mobile Phone'] = phone.value;
              break;
            case 'WORK':
              if (phone.types[1] === 'FAX') {
                contact['Business Fax'] = phone.value;
              } else {
                contact['Business Phone'] = phone.value;
              }
              break;
            case 'FAX':
              throw 'FAX NUMBER FOUND!';
              break;
            case 'HOME':
              contact['Home Phone'] = phone.value;
              break;
            case 'OTHER':
              contact['Other Phone'] = phone.value;
              break;
            default:
              throw "Unknown number!! " + phone.types[0];
          }
        }
        _ref3 = result.emailAddresses;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          email = _ref3[_j];
          switch (email.types[0]) {
            case 'HOME':
            case 'INTERNET':
              contact['Email Address'] = email.value;
              break;
            case 'WORK':
              contact['Email Address 2'] = email.value;
              break;
            case 'OTHER':
              contact['Email Address 3'] = email.value;
          }
        }
      } catch (_error) {
        ex = _error;
        console.log("An EXCEPTION HAPPENED");
        console.log(result);
        throw ex;
      }
      contacts.push(contact);
      pendingContacts--;
      console.log(pendingContacts);
      if (!(pendingContacts > 0)) {
        return writeCsv();
      }
    });
  };

  writeCsv = function() {
    var buf, columns, k;
    console.log("Writing CSV..");
    columns = (function() {
      var _results;
      _results = [];
      for (k in contacts[0]) {
        _results.push(k);
      }
      return _results;
    })();
    console.log("%j", columns);
    return buf = (csv().from(contacts, {
      columns: columns
    })).to("./" + username + ".csv", {
      headers: true,
      columns: columns
    });
  };

}).call(this);
